 if (exp_type == GET)
    {
        Get *get_exp = (Get*)exp;
        for (int i = 0;i < get_exp->var_names.size();i++)
        {
            string str;
            getline(cin, str);
            if (str == "")
                throw new Error("No value entered for " + get_exp->var_names[i]);
            if (isNum(str))
            {
                int int_value = atoi(str.c_str());
                IntVal *var_value = new IntVal(int_value);

                if (scope->IsDefined(get_exp->var_names[i]))
                    scope->SetValue(get_exp->var_names[i], var_value);
                else
                    scope->AddValue(get_exp->var_names[i], var_value);
            }
            else
            {
                StringVal *var_value = new StringVal(str);

                if (scope->IsDefined(get_exp->var_names[i]))
                    scope->SetValue(get_exp->var_names[i], var_value);
                else
                    scope->AddValue(get_exp->var_names[i], var_value);
            }
        }
    }


____________________________



 if (NextTok.Is("get") && !not_keyword_exp)
    {
        vector < string >  get_vars;
        Consume("get");
        Consume("(");
        while (!NextTok.Is(")"))
        {
            if (NextTok.Is(Variable_Token) && find(keywords.begin(), keywords.end(), NextTok.lexeme) == keywords.end())
            {
                string var_name = NextTok.lexeme;
                get_vars.push_back(var_name);
                Consume(Variable_Token);
            }
            else
                throw new Error("Expected token of type " + exceptions[Variable_Token] + " in the 'get' expression.");
        }
        Consume(")");

        t1 = new Get(get_vars);
        return t1;
    }